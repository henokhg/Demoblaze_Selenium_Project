{"name": "test_login_Special_Character", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-link\" href=\"#\" id=\"login2\" data-toggle=\"modal\" data-target=\"#logInModal\" style=\"display: block;\">...</a> is not clickable at point (1121, 37). Other element would receive the click: <div class=\"modal fade show\" id=\"signInModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"signInModalLabel\" style=\"display: block;\">...</div>\n  (Session info: chrome=109.0.5414.120)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x01186643]\n\t(No symbol) [0x0111BE21]\n\t(No symbol) [0x0101DA9D]\n\t(No symbol) [0x010592B2]\n\t(No symbol) [0x01056970]\n\t(No symbol) [0x01053E0B]\n\t(No symbol) [0x01052548]\n\t(No symbol) [0x01046B13]\n\t(No symbol) [0x0106FD7C]\n\t(No symbol) [0x0104641F]\n\t(No symbol) [0x010700D4]\n\t(No symbol) [0x01086B09]\n\t(No symbol) [0x0106FB76]\n\t(No symbol) [0x010449C1]\n\t(No symbol) [0x01045E5D]\n\tGetHandleVerifier [0x013FA142+2497106]\n\tGetHandleVerifier [0x014285D3+2686691]\n\tGetHandleVerifier [0x0142BB9C+2700460]\n\tGetHandleVerifier [0x01233B10+635936]\n\t(No symbol) [0x01124A1F]\n\t(No symbol) [0x0112A418]\n\t(No symbol) [0x0112A505]\n\t(No symbol) [0x0113508B]\n\tBaseThreadInitThunk [0x76BB00F9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77387BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77387B8E+238]", "trace": "self = <Web.Tests.test_login.Test_Login_Page object at 0x0000020DE2769750>\n\n    @allure.description('test_login_Using Special Character')\n    @pytest.mark.sanity\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_login_Special_Character(self):\n        driver = self.driver\n        signup = SignUp_Steps(driver)\n        signup.click_on_signup_button()\n        signup.enter_User_name(\"henok123\")\n        signup.enter_password(\"meheret\")\n        login = Login_Steps(driver)\n>       login.click_on_login_button()\n\ntest_login.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\page_login.py:23: in click_on_login_button\n    self.driver.find_element(By.XPATH, self.login_button).click()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:403: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020DE27BC4D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77387BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77387B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-link\" href=\"#\" id=\"login2\" data-toggle=\"modal\" data-target=\"#logInModal\" style=\"display: block;\">...</a> is not clickable at point (1121, 37). Other element would receive the click: <div class=\"modal fade show\" id=\"signInModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"signInModalLabel\" style=\"display: block;\">...</div>\nE         (Session info: chrome=109.0.5414.120)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x01186643]\nE       \t(No symbol) [0x0111BE21]\nE       \t(No symbol) [0x0101DA9D]\nE       \t(No symbol) [0x010592B2]\nE       \t(No symbol) [0x01056970]\nE       \t(No symbol) [0x01053E0B]\nE       \t(No symbol) [0x01052548]\nE       \t(No symbol) [0x01046B13]\nE       \t(No symbol) [0x0106FD7C]\nE       \t(No symbol) [0x0104641F]\nE       \t(No symbol) [0x010700D4]\nE       \t(No symbol) [0x01086B09]\nE       \t(No symbol) [0x0106FB76]\nE       \t(No symbol) [0x010449C1]\nE       \t(No symbol) [0x01045E5D]\nE       \tGetHandleVerifier [0x013FA142+2497106]\nE       \tGetHandleVerifier [0x014285D3+2686691]\nE       \tGetHandleVerifier [0x0142BB9C+2700460]\nE       \tGetHandleVerifier [0x01233B10+635936]\nE       \t(No symbol) [0x01124A1F]\nE       \t(No symbol) [0x0112A418]\nE       \t(No symbol) [0x0112A505]\nE       \t(No symbol) [0x0113508B]\nE       \tBaseThreadInitThunk [0x76BB00F9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77387BBE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77387B8E+238]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: ElementClickInterceptedException"}, "description": "test_login_Using Special Character", "steps": [{"name": "click_on_signup_button", "status": "passed", "start": 1675640058335, "stop": 1675640060428}, {"name": "enter_User_name", "status": "passed", "steps": [{"name": "assertion", "status": "passed", "parameters": [{"name": "expected_chrome", "value": "'henok123'"}, {"name": "actual", "value": "'henok123'"}, {"name": "expected_firefox", "value": "None"}], "start": 1675640062584, "stop": 1675640062584}], "parameters": [{"name": "User_name", "value": "'henok123'"}], "start": 1675640060428, "stop": 1675640062584}, {"name": "enter_password", "status": "passed", "steps": [{"name": "assertion", "status": "passed", "parameters": [{"name": "expected_chrome", "value": "'meheret'"}, {"name": "actual", "value": "'meheret'"}, {"name": "expected_firefox", "value": "None"}], "start": 1675640064690, "stop": 1675640064690}], "parameters": [{"name": "User_password", "value": "'meheret'"}], "start": 1675640062584, "stop": 1675640064690}, {"name": "click_on_login_button", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-link\" href=\"#\" id=\"login2\" data-toggle=\"modal\" data-target=\"#logInModal\" style=\"display: block;\">...</a> is not clickable at point (1121, 37). Other element would receive the click: <div class=\"modal fade show\" id=\"signInModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"signInModalLabel\" style=\"display: block;\">...</div>\n  (Session info: chrome=109.0.5414.120)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x01186643]\n\t(No symbol) [0x0111BE21]\n\t(No symbol) [0x0101DA9D]\n\t(No symbol) [0x010592B2]\n\t(No symbol) [0x01056970]\n\t(No symbol) [0x01053E0B]\n\t(No symbol) [0x01052548]\n\t(No symbol) [0x01046B13]\n\t(No symbol) [0x0106FD7C]\n\t(No symbol) [0x0104641F]\n\t(No symbol) [0x010700D4]\n\t(No symbol) [0x01086B09]\n\t(No symbol) [0x0106FB76]\n\t(No symbol) [0x010449C1]\n\t(No symbol) [0x01045E5D]\n\tGetHandleVerifier [0x013FA142+2497106]\n\tGetHandleVerifier [0x014285D3+2686691]\n\tGetHandleVerifier [0x0142BB9C+2700460]\n\tGetHandleVerifier [0x01233B10+635936]\n\t(No symbol) [0x01124A1F]\n\t(No symbol) [0x0112A418]\n\t(No symbol) [0x0112A505]\n\t(No symbol) [0x0113508B]\n\tBaseThreadInitThunk [0x76BB00F9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77387BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77387B8E+238]\n\n", "trace": "  File \"C:\\Users\\Henok\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\Henok\\Desktop\\Demoblaze_Selenium_Project\\Web\\Pages\\page_login.py\", line 23, in click_on_login_button\n    self.driver.find_element(By.XPATH, self.login_button).click()\n  File \"C:\\Users\\Henok\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\Henok\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 403, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Henok\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Henok\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1675640064690, "stop": 1675640065737}], "attachments": [{"name": "stdout", "source": "586618a9-983e-469e-bd08-f24f69ea225b-attachment.txt", "type": "text/plain"}], "start": 1675640058335, "stop": 1675640065787, "uuid": "4af0f6a1-7e6f-4429-9529-ace921716374", "historyId": "b0a893e1e9fb5df99c03a2866a31629f", "testCaseId": "e9ab07c79c78a09333ec55ad085dfca6", "fullName": "test_login.Test_Login_Page#test_login_Special_Character", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "sanity"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "Test_Login_Page"}, {"name": "host", "value": "DESKTOP-4H4LEB1"}, {"name": "thread", "value": "8008-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}]}